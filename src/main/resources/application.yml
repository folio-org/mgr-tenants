spring:
  application:
    name: mgr-tenants
  jackson:
    default-property-inclusion: non_null
    deserialization:
      fail-on-unknown-properties: false
      accept-single-value-as-array: true
  datasource:
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:tenant_manager}
  liquibase:
    change-log: classpath:changelog/changelog-master.xml
  jpa:
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  cache:
    cache-names: token
    caffeine:
      spec: maximumSize=100,expireAfterWrite=${CACHE_EXPIRATION_TTL:60s}
  cloud:
    openfeign:
      okhttp:
        enabled: true
  kafka:
    bootstrap-servers: ${KAFKA_HOST:kafka}:${KAFKA_PORT:9092}
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      key-store-password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
      key-store-location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
      trust-store-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
      trust-store-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}

server:
  port: ${SERVER_PORT:8081}
  max-http-request-header-size: ${MAX_HTTP_REQUEST_HEADER_SIZE:200KB}
  compression:
    enabled: true
    mime-types: text/html,text/plain,text/css,application/javascript,application/json
  ssl:
    enabled: ${SERVER_SSL_ENABLED:false}
    key-store: ${SERVER_SSL_KEY_STORE}
    key-store-type: ${SERVER_SSL_KEY_STORE_TYPE:BCFKS}
    key-store-provider: ${SERVER_SSL_KEY_STORE_PROVIDER:BCFIPS}
    key-store-password: ${SERVER_SSL_KEY_STORE_PASSWORD}
    key-password: ${SERVER_SSL_KEY_PASSWORD}

application:
  router:
    path-prefix: ${ROUTER_PATH_PREFIX:}
  environment: ${ENV:folio}
  security:
    enabled: ${SECURITY_ENABLED:true}
  keycloak:
    enabled: ${KC_INTEGRATION_ENABLED:true}
    url: ${KC_URL:http://keycloak:8080}
    admin:
      url: ${KC_URL:http://keycloak:8080}
      client_id: ${KC_ADMIN_CLIENT_ID:folio-backend-admin-client}
      username: ${KC_ADMIN_USERNAME:}
      password: ${KC_ADMIN_PASSWORD:}
      grant_type: ${KC_ADMIN_GRANT_TYPE:client_credentials}
    import:
      enabled: ${KC_IMPORT_ENABLED:false}
    client:
      client_id: ${KC_CLIENT_ID:mgr-tenants}
    realm-setup:
      login-client:
        client_id: ${KC_LOGIN_CLIENT_SUFFIX:-login-application}
      m2m-client:
        client_id: ${KC_SERVICE_CLIENT_ID:sidecar-module-access-client}
      client-secret-length: ${KC_CLIENT_SECRET_LENGTH:32}
      impersonation-client: ${KC_IMPERSONATION_CLIENT:impersonation-client}
      password-reset-client:
        client_id: ${KC_PASSWORD_RESET_CLIENT_ID:password-reset-client}
        token_lifespan: ${KC_PASSWORD_RESET_TOKEN_TTL:86400}
      access-code-lifespan: ${KC_ACCESS_CODE_TTL:600}
      par-request-uri-lifespan: ${KC_PAR_REQUEST_URI_TTL:600}
      access-token-lifespan: ${KC_ACCESS_TOKEN_TTL:300}
      sso-session:
        idle-timeout: ${KC_SSO_SESSION_IDLE_TTL:64800}
        max-lifespan: ${KC_SSO_SESSION_MAX_TTL:64800}
      client-session:
        idle-timeout: ${KC_CLIENT_SESSION_IDLE_TTL:64800}
        max-lifespan: ${KC_CLIENT_SESSION_MAX_TTL:64800}
    tls:
      enabled: ${KC_CLIENT_TLS_ENABLED:false}
      trust-store-path: ${KC_CLIENT_TLS_TRUSTSTORE_PATH}
      trust-store-password: ${KC_CLIENT_TLS_TRUSTSTORE_PASSWORD}
      trust-store-type: ${KC_CLIENT_TLS_TRUSTSTORE_TYPE}
    jwt-cache-configuration:
      validate-uri: ${KC_AUTH_TOKEN_VALIDATE_URI:false}
      jwks-refresh-interval: ${KC_JWKS_REFRESH_INTERVAL:60}
      forced-jwks-refresh-interval: ${KC_FORCED_JWKS_REFRESH_INTERVAL:60}
  kong:
    enabled: ${KONG_INTEGRATION_ENABLED:true}
    url: ${KONG_ADMIN_URL:${kong.url:}}
    module-self-url: ${MODULE_URL:http://mgr-tenants:8081}
    register-module: ${REGISTER_MODULE_IN_KONG:true}
    connect-timeout: ${KONG_CONNECT_TIMEOUT:}
    read-timeout: ${KONG_READ_TIMEOUT:}
    write-timeout: ${KONG_WRITE_TIMEOUT:}
    retries: ${KONG_RETRIES:}
    tls:
      enabled: ${KONG_TLS_ENABLED:false}
      trust-store-path: ${KONG_TLS_TRUSTSTORE_PATH:}
      trust-store-password: ${KONG_TLS_TRUSTSTORE_PASSWORD:}
      trust-store-type: ${KONG_TLS_TRUSTSTORE_TYPE:}
  okapi:
    enabled: ${OKAPI_INTEGRATION_ENABLED:false}
    url: ${OKAPI_URL:${okapi.url:}}
    mod-authtoken-url: ${MOD_AUTHTOKEN_URL}
  secret-store:
    type: ${SECRET_STORE_TYPE:}
    aws-ssm:
      region: ${SECRET_STORE_AWS_SSM_REGION:}
      use-iam: ${SECRET_STORE_AWS_SSM_USE_IAM:true}
      ecs-credentials-endpoint: ${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_ENDPOINT:}
      ecs-credentials-path: ${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_PATH:}
    vault:
      token: ${SECRET_STORE_VAULT_TOKEN:}
      address: ${SECRET_STORE_VAULT_ADDRESS:}
      enable-ssl: ${SECRET_STORE_VAULT_ENABLE_SSL:false}
      pem-file-path: ${SECRET_STORE_VAULT_PEM_FILE_PATH:}
      keystore-password: ${SECRET_STORE_VAULT_KEYSTORE_PASSWORD:}
      keystore-file-path: ${SECRET_STORE_VAULT_KEYSTORE_FILE_PATH:}
      truststore-file-path: ${SECRET_STORE_VAULT_TRUSTSTORE_FILE_PATH:}
    fssp:
      address: ${SECRET_STORE_FSSP_ADDRESS:}
      secret-path: ${SECRET_STORE_FSSP_SECRET_PATH:secure-store/entries}
      enable-ssl: ${SECRET_STORE_FSSP_ENABLE_SSL:false}
      trust-store-path: ${SECRET_STORE_FSSP_TRUSTSTORE_PATH:}
      trust-store-file-type: ${SECRET_STORE_FSSP_TRUSTSTORE_FILE_TYPE:}
      trust-store-password: ${SECRET_STORE_FSSP_TRUSTSTORE_PASSWORD:}

management:
  endpoints.web:
    base-path: /admin
    exposure:
      include: info,health,liquibase,threaddump,heapdump,httptrace,loggers
